#UPa
#sudo 7z x reports.rar -o/opt/bitnami/apache2/htdocs/kraken
#sudo apt install p7zip-full




linux_version() {
    cat /etc/os-release
}

nano_install(){
    apt update && apt install nano -y
}

ssh_zip() {
    if [ -z "$1" ]; then
        echo "Usage: ssh_zip <foldername>"
        return 1
    fi
    sudo tar -czvf "$1".tgz "$1"/
}

python_serve(){
    python -m http.server 8000
}




flask_run() {
    clear
    flask run
}

flask_restart(){
    clear    
    sudo rm -f ../instance/*.sqlite ../instance/*.db
    flask run
}

bashrc_refresh(){
    cd ~/bashrc
    git pull
    . ~/.bashrc    
    cd -
}

test_all(){
    python -m unittest discover
}

watchdog(){
    watchmedo shell-command --patterns="*.py" --recursive command='python -m unittest discover -s tests -v' .
}

watchdog_always(){
    nohup watchmedo shell-command --patterns="*.py" --recursive --command='python -m unittest discover -s tests -v' . &
}

port_check() {
    sudo lsof -i :"$1"
}

port_kill() {
    sudo kill -9 "$1"
}

ssh_iniciar() {
    eval "$(ssh-agent -s)"
}

ssh_generate() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "‚ùå Error: Debes proporcionar tanto un nombre para la clave como una contrase√±a."
    return 1
  fi

  # Definir el nombre del archivo de la clave y la contrase√±a
  local nombre_clave="$1"
  local password="$2"
  
  echo "üîë Iniciando la generaci√≥n de la clave SSH..."

  # Mensaje sobre los par√°metros recibidos
  echo "üìù Nombre de la clave: $nombre_clave"
  echo "üîí Contrase√±a asignada: [no se mostrar√° por seguridad]"

  # Generar la clave SSH ED25519 con el nombre proporcionado
  echo "‚öôÔ∏è Generando clave SSH con el algoritmo ED25519..."
  ssh-keygen -t ed25519 -C "$nombre_clave" -f "$HOME/.ssh/$nombre_clave" -N "$password"

  # Verificar si la clave p√∫blica fue generada
  local pub_key="$HOME/.ssh/${nombre_clave}.pub"
  if [ -f "$pub_key" ]; then
    echo "‚úÖ Clave SSH generada con √©xito para '$nombre_clave'."

    # Mostrar contenido de la clave p√∫blica
    echo "üìú Contenido de la clave p√∫blica generada:"
    cat "$pub_key"  # Mostrar el contenido de la clave p√∫blica

    echo "üéâ ¬°La clave p√∫blica ha sido mostrada exitosamente!"
  else
    echo "‚ùå Error: No se pudo generar la clave p√∫blica. Revisa los errores anteriores."
    return 1
  fi
}
ssh_activar() {
    
    if [ -z "$1" ]; then
        echo "Usage: ssh_activar <key_filename>"
        return 1
    fi
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/"$1"
}

tree_list(){
    tree -I 'node_modules|venv|.git|__pycache__|dist|build|.pytest_cache|.vscode|.idea|coverage' -a
}
########################################################################################## PYTHON
pyenv_install() {
    echo "üîß Actualizando paquetes..."
    sudo apt update -y

    echo "üì¶ Instalando dependencias..."
    sudo apt install -y make build-essential libssl-dev zlib1g-dev \
        libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
        libncurses5-dev libncursesw5-dev xz-utils tk-dev \
        libffi-dev liblzma-dev git

    echo "‚¨áÔ∏è Instalando pyenv..."
    curl https://pyenv.run | bash

    echo "‚öôÔ∏è Configurando variables en ~/.bashrc..."
    if ! grep -q 'pyenv init' ~/.bashrc; then
        cat <<'EOF' >> ~/.bashrc

# >>> pyenv configuration >>>
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
# <<< pyenv configuration <<<
EOF
    fi

    echo "üîÑ Recargando configuraci√≥n..."
    source ~/.bashrc

    echo "‚úÖ Instalaci√≥n completada. Versi√≥n de pyenv:"
    pyenv --version
}

pyenv_local() {
  local version=$1
  if [ -z "$version" ]; then
    echo "‚ùå Debes pasar una versi√≥n. Ejemplo: set_pyenv_local 3.11.9"
    return 1
  fi

  # Verificar si ya est√° instalada
  if ! pyenv versions --bare | grep -q "^${version}\$"; then
    echo "üîç Python $version no est√° instalado. Instalando..."
    pyenv install "$version"
  else
    echo "‚úÖ Python $version ya est√° instalado."
  fi

  # Configurar como local
  pyenv local "$version"
  echo "üìå Se configur√≥ Python $version como versi√≥n local en $(pwd)"
}

pyenv_version() {
  if ! command -v pyenv >/dev/null 2>&1; then
    echo "‚ùå pyenv no est√° instalado o no est√° en el PATH."
    return 1
  fi

  echo "üêç Versi√≥n activa de Python con pyenv:"
  pyenv exec python -V
}

pyenv_venv() {
    if [ -z "$1" ]; then
        echo "‚ùå Debes pasar el nombre del environment como par√°metro"
        echo "üëâ Ejemplo: make_env myproject"
        return 1
    fi

    ENV_NAME="$1"
    ENV_DIR=".$ENV_NAME"

    echo "üöÄ Creando environment en $ENV_DIR ..."
    pyenv exec python -m venv "$ENV_DIR"

    echo "‚úÖ Environment creado: $ENV_DIR"
    echo "üëâ Act√≠valo con: source $ENV_DIR/bin/activate"
}

pyenv_activate_venv() {
    if [ -z "$1" ]; then
        echo "‚ùå Debes pasar el nombre del environment como par√°metro"
        echo "üëâ Ejemplo: activate_env venv"
        return 1
    fi

    ENV_NAME="$1"
    ENV_DIR=".$ENV_NAME"

    if [ ! -d "$ENV_DIR" ]; then
        echo "‚ùå El environment $ENV_DIR no existe."
        echo "üëâ Primero cr√©alo con: make_env $ENV_NAME"
        return 1
    fi

    echo "‚ö° Activando environment: $ENV_DIR ..."
    source "$ENV_DIR/bin/activate"
}

pyenv_gitignore() {
  local file=".gitignore"

  if [ -f "$file" ]; then
    echo "‚ö†Ô∏è Ya existe un $file en $(pwd). No se sobrescribi√≥."
    return 1
  fi

  cat > "$file" <<EOF
# ========================
# Archivos Python compilados
# ========================
*.pyc
*.pyo
*.pyd
__pycache__/

# ========================
# Entornos virtuales
# ========================
.env
.venv/
env/
venv/
ENV/

# ========================
# Bases de datos
# ========================
*.db
*.sqlite3

# ========================
# Archivos de pruebas
# ========================
.coverage
coverage.xml
*.cover
*.py,cover
.pytest_cache/
htmlcov/
.tox/
.nox/

# ========================
# Distribuci√≥n / empaquetado
# ========================
build/
dist/
*.egg-info/
.eggs/

# ========================
# Logs
# ========================
*.log

# ========================
# IDEs / Editores
# ========================
.vscode/
.idea/

# ========================
# Archivos del sistema
# ========================
.DS_Store
Thumbs.db

# ========================
# Im√°genes y binarios
# ========================
*.png
*.jpg
*.jpeg
*.gif
*.svg
*.ico

# ========================
# Otros
# ========================
*.bak
*.tmp
EOF

  echo "‚úÖ Archivo $file creado en $(pwd)"
}


########################################################################################## FASTAPI

fastapi_install() {
    if [ -z "$VIRTUAL_ENV" ]; then
        echo "‚ö†Ô∏è No hay ning√∫n entorno virtual activado."
        echo "üëâ Primero activa tu venv con: source .venv/bin/activate"
        return 1
    fi

    echo "üì¶ Instalando FastAPI y Uvicorn en $VIRTUAL_ENV..."
    pip install --upgrade pip
    pip install fastapi uvicorn

    echo "üéâ FastAPI y Uvicorn instalados correctamente"
}

########################################################################################## REQUIREMENTS

requirements_install() {
    echo "üì¶ Instalando dependencias desde requirements.txt..."
    pip install --upgrade pip
    pip install -r requirements.txt
    echo "‚úÖ Dependencias instaladas."
}

requirements_generate() {
    echo "üìÑ Generando requirements.txt..."
    pip freeze > requirements.txt
    echo "‚úÖ requirements.txt actualizado."
}


########################################################################################## NPM
npm_list(){
    npm list -g --depth=0
}
npm_install(){
    if [ -z "$1" ]; then
        echo "Usage: npm_install <packageName>"
        return 1
    fi
    sudo npm install -g "$1"
}
npm_uninstall(){
    if [ -z "$1" ]; then
        echo "Usage: npm_uninstall <packageName>"
        return 1
    fi
    sudo npm uninstall -g "$1"
}
npx_list(){
    npm list --depth=0
}
npx_install(){
    if [ -z "$1" ]; then
        echo "Usage: npx_install <packageName>"
        return 1
    fi
    npm install "$1"
}
npx_uninstall(){
    if [ -z "$1" ]; then
        echo "Usage: npx_uninstall <packageName>"
        return 1
    fi
    npm uninstall "$1"
}

########################################################################################## GIT
git_email() {
    if [ -z "$1" ]; then
        echo "Uso: git_set_email \"correo@example.com\""
        return 1
    fi
    git config --global user.email "$1"
    echo "Correo de Git configurado como: $1"
}

git_name() {
    if [ -z "$1" ]; then
        echo "Uso: git_set_name \"Tu Nombre\""
        return 1
    fi
    git config --global user.name "$1"
    echo "Nombre de Git configurado como: $1"
}



########################################################################################## DOCKER
docker_networks(){
    sudo docker network ls

}

docker_networks_create(){
    if [ -z "$1" ]; then
        echo "Usage: cdocker_networks_create <network_name>"
        return 1
    fi

    NETWORK_NAME="$1"

    if sudo docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
        echo "Network '$NETWORK_NAME' already exists."
    else
        sudo docker network create "$NETWORK_NAME"
        echo "Network '$NETWORK_NAME' created successfully."
    fi
}

docker_networks_delete(){
        if [ -z "$1" ]; then
        echo "Usage: docker_networks_delete <network_name | all>"
        return 1
    fi

    NETWORK_NAME="$1"

    if [ "$NETWORK_NAME" == "all" ]; then
        echo "Deleting all user-defined Docker networks..."
        # List all user-defined networks (excluding 'bridge', 'host', 'none') and delete them
        for net in $(sudo docker network ls --format "{{.Name}}" --filter "driver=bridge"); do
            if [[ "$net" != "bridge" && "$net" != "host" && "$net" != "none" ]]; then
                echo "Deleting network: $net"
                sudo docker network rm "$net"
            fi
        done
        echo "All user-defined networks deleted successfully."
    else
        # Check if the specific network exists
        if sudo docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
            # Check if any containers are connected to the network
            if [ "$(sudo docker network inspect --format='{{range .Containers}}{{.Name}} {{end}}' "$NETWORK_NAME")" ]; then
                echo "Error: Network '$NETWORK_NAME' has active containers. Remove them first."
                return 1
            fi

            # Remove the network
            sudo docker network rm "$NETWORK_NAME"
            echo "Network '$NETWORK_NAME' deleted successfully."
        else
            echo "Network '$NETWORK_NAME' does not exist."
        fi
    fi
}

docker_c(){
    sudo docker ps -a
}

docker_c_run() {
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        echo "Usage: docker_c_run <originPort> <destinationPort> <image_name> <container_name>"
        return 1
    fi
    sudo docker run -d -p "$2:$1" --name "$4" "$3"
}

docker_c_run_in_network() {
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ]; then
        echo "Usage: docker_run <originPort> <destinationPort> <image_name> <container_name> <network>"
        return 1
    fi

    CUSTOM_URL="$5"  # Set the custom URL to the 5th parameter (network name)
    
    sudo docker run --network "$5" -p "$2:$1" --name "$4" -e CUSTOM_URL="$CUSTOM_URL" "$3"
}


docker_c_run_always() {
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        echo "Usage: docker_run <originPort> <destinationPort> <image_name> <container_name>"
        return 1
    fi
    sudo docker run -dp "$2":"$1" --name "$4" -w /app -v "$(pwd):/app" "$3"   
}

docker_c_run_always_in_network() {
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ]; then
        echo "Usage: docker_run <originPort> <destinationPort> <image_name> <container_name> <network>"
        return 1
    fi
    sudo docker run -dp "$2:$1" --network "$5" --name "$4" -w /app -v "$(pwd):/app" "$3" tail -f /dev/null
}


docker_c_start() {
    if [ "$1" == "all" ]; then
        echo "Starting all stopped containers..."
        sudo docker start $(sudo docker ps -aq)
    else
        echo "Starting container: $1"
        sudo docker start "$1"
    fi
}

docker_c_stop() {
    if [ -z "$1" ]; then
        echo "Usage: docker_c_stop <container_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker stop $(sudo docker ps -q)
    else
        sudo docker stop "$1"
    fi
}

docker_c_restart() {
    if [ -z "$1" ]; then
        echo "Usage: docker_c_restart <container_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker restart $(sudo docker ps -q)
    else
        sudo docker restart "$1"
    fi
}

docker_c_delete() {
    if [ -z "$1" ]; then
        echo "Usage: docker_delete <container_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker rm $(sudo docker ps -aq)
    else
        sudo docker rm "$1"
    fi
}

docker_c_logs(){
    if [ -z "$1" ]; then
        echo "Usage: docker_c_logs <container_name_or_id>"
        return 1
    fi
    sudo docker logs -f "$1"
}

docker_c_enter(){
    if [ -z "$1" ]; then
        echo "Usage: docker_c_enter <container_name_or_id>"
        return 1
    fi
    sudo docker exec -it "$1" sh
}

docker_i(){
    sudo docker images
}

docker_i_build() {
    if [ -z "$1" ]; then
        echo "Usage: docker_build <image_name>"
        return 1
    fi
    sudo docker build --network=host -t "$1" .
}

docker_i_delete() {
    if [ -z "$1" ]; then
        echo "Usage: docker_delete_image <image_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker rmi $(sudo docker images -q)
    else
        sudo docker rmi "$1"
    fi
}

docker_i_delete_forced() {
    if [ -z "$1" ]; then
        echo "Usage: docker_delete_image <image_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker rmi -f $(sudo docker images -q)
    else
        sudo docker rmi -f "$1"
    fi
}

docker_i_compose() {
    sudo docker compose up
}

docker_i_compose_forced() {
    if [ -z "$1" ]; then
        echo "Usage: docker_i_compose_forced <service_name>"
        return 1
    fi
    sudo docker compose up --build --force-recreate --no-deps "$1"
}

docker_i_pull() {
    if [ -z "$1" ]; then
        echo "Usage: docker_i_pull <image_name> <version (opcional)>"
        return 1
    fi
    sudo docker image pull "$1:${2:-latest}"
}

docker_install() {
    OS=$1  # Recibe 'debian' o 'ubuntu'

    if [[ "$OS" != "debian" && "$OS" != "ubuntu" ]]; then
        echo "Error: Debes especificar 'debian' o 'ubuntu'."
        return 1
    fi

    echo "Instalando Docker en $OS..."

    sudo apt-get update
    sudo apt-get install -y ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/$OS/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/$OS \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
}

docker_clean(){
    sudo docker system prune -a --volumes
}

########################################################################################## GHOST

MAILGUN_USER="brad@sandbox27703646c4a5406f948c2ed685c84070.mailgun.org"
MAILGUN_API_KEY="27450cd34c15e02c3830faae0f41ff63-67bd41c2-c8b32c62"

ghost_terminal(){
    sudo docker exec -it ghost /bin/bash
}

install_jq_in_container() {
    echo "üîß Instalando jq dentro del contenedor Ghost..."
    sudo docker exec ghost bash -c "apt-get update && apt-get install -y jq"
}

replace_mail_config() {
    local config_file=$1

    echo "Verificando existencia del archivo en el contenedor: $config_file"
    sudo docker exec ghost ls "$config_file"

    if [ $? -ne 0 ]; then
        echo "El archivo $config_file no existe en el contenedor."
        return 1
    fi

    echo "Reemplazando la configuraci√≥n de mail en $config_file con jq..."

    sudo docker exec ghost bash -c "jq \
    '.mail = {
        transport: \"SMTP\",
        options: {
            service: \"Mailgun\",
            host: \"smtp.mailgun.org\",
            port: 587,
            secure: false,
            auth: {
                user: \"${MAILGUN_USER}\",
                pass: \"${MAILGUN_API_KEY}\"
            }
        }
    }' $config_file > /tmp/config.tmp && mv /tmp/config.tmp $config_file"

    echo "‚úÖ Configuraci√≥n de mail reemplazada usando jq."
}

ghost_run() {
    # Par√°metro: versi√≥n de Ghost
    GHOST_VERSION=$1

    # Nombre fijo para el contenedor y puerto est√°ndar
    CONTAINER_NAME="ghost"
    IMAGE_NAME="ghost:${GHOST_VERSION}"
    HOST_PORT=2368
    CONTAINER_PORT=2368

    echo "üß≠ Verificando existencia del contenedor '${CONTAINER_NAME}'..."

    if [ "$(sudo docker ps -a -q -f name=^/${CONTAINER_NAME}$)" ]; then
        echo "‚õî Contenedor '${CONTAINER_NAME}' encontrado. Deteniendo y eliminando..."
        sudo docker stop ${CONTAINER_NAME}
        sudo docker rm ${CONTAINER_NAME}
    else
        echo "‚ÑπÔ∏è No existe un contenedor llamado '${CONTAINER_NAME}'."
    fi

    echo "üßπ Limpiando vol√∫menes sin uso..."
    sudo docker volume prune -f

    echo "üì¶ Levantando Ghost ${GHOST_VERSION} en http://localhost:${HOST_PORT}..."
    sudo docker run -d \
        --name ${CONTAINER_NAME} \
        -e NODE_ENV=development \
        -p ${HOST_PORT}:${CONTAINER_PORT} \
        ${IMAGE_NAME}

    echo "‚úÖ Ghost ${GHOST_VERSION} corriendo en http://localhost:${HOST_PORT}"
}


cypress_run() {
    # Recibir la versi√≥n de Ghost como par√°metro
    VERSION=$1

    echo "üöÄ Ejecutando pruebas con Cypress usando la versi√≥n de Ghost ${VERSION}..."
    VERSION=$VERSION npm run test --workspace=e2e/misw-4103-cypress

    echo "üßπ Renombrando y moviendo archivos .png, y eliminando directorios vac√≠os..."

    find e2e/misw-4103-cypress/cypress/screenshots/$VERSION -mindepth 2 -type f -name "*.png" -exec bash -c '
      for file; do
        folder_path=$(dirname "$file")
        folder_name=$(basename "$folder_path")
        ext="${file##*.}"
        new_name="${folder_name}.${ext}"
        mv "$file" "e2e/misw-4103-cypress/cypress/screenshots/'"$VERSION"'/$new_name"
      done
    ' bash {} +

    find e2e/misw-4103-cypress/cypress/screenshots/$VERSION -mindepth 1 -type d -empty -delete
}




kraken_run(){
    npm run test --workspace=e2e/misw-4103-kraken
}

########################################################################################## KRAKEN
kraken_install(){
    npm install kraken-node -g
    kraken-node gen
    npm install kraken-node
}

kraken_run(){
    npm run test --workspace=e2e/misw-4103-kraken
}

kraken_reports_clear(){
    sudo rm -r /e2e/misw-4103-kraken/reports/
}
chromium_listen(){
    chromedriver --port=4444
}





########################################################################################## CYPRESS

cypress_install(){
    sudo npm install -g cypress
}

cypress_open(){
    cypress open
}

cypress_run_headed() {
    FOLDER=$1
    FILE=$2

    if [ "$FOLDER" == "all" ] && [ "$FILE" == "all" ]; then
        # Ejecutar todas las pruebas en modo headed
        sudo cypress run --headed
    elif [ "$FOLDER" == "all" ] && [ -n "$FILE" ]; then
        # Ejecutar un archivo espec√≠fico dentro de una carpeta en modo headed
        sudo cypress run --headed --spec "/home/danielsierra34/MAESTRIA/MISW4103-Pruebas-automatizadas/CYPRESS/cypress/e2e/$FOLDER/$FILE.cy.js"
    elif [ -n "$FOLDER" ] && [ -n "$FILE" ]; then
        # Ejecutar un archivo espec√≠fico en una carpeta espec√≠fica en modo headed
        sudo cypress run --headed --spec "/home/danielsierra34/MAESTRIA/MISW4103-Pruebas-automatizadas/CYPRESS/cypress/e2e/$FOLDER/$FILE.cy.js"
    else
        # Ejecutar todas las pruebas en una carpeta espec√≠fica en modo headed
        sudo cypress run --headed --spec "/home/danielsierra34/MAESTRIA/MISW4103-Pruebas-automatizadas/CYPRESS/cypress/e2e/$FOLDER/*.cy.js"
    fi
}

cypress_run_headless() {
    FOLDER=$1
    FILE=$2

    if [ "$FOLDER" == "all" ] && [ "$FILE" == "all" ]; then
        # Ejecutar todas las pruebas en modo headless
        sudo cypress run --headless
    elif [ "$FOLDER" == "all" ] && [ -n "$FILE" ]; then
        # Ejecutar un archivo espec√≠fico dentro de una carpeta en modo headless
        sudo cypress run --headless --spec "/home/danielsierra34/MAESTRIA/MISW4103-Pruebas-automatizadas/CYPRESS/cypress/e2e/$FOLDER/$FILE.cy.js"
    elif [ -n "$FOLDER" ] && [ -n "$FILE" ]; then
        # Ejecutar un archivo espec√≠fico en una carpeta espec√≠fica en modo headless
        sudo cypress run --headless --spec "/home/danielsierra34/MAESTRIA/MISW4103-Pruebas-automatizadas/CYPRESS/cypress/e2e/$FOLDER/$FILE.cy.js"
    else
        # Ejecutar todas las pruebas en una carpeta espec√≠fica en modo headless
        sudo cypress run --headless --spec "/home/danielsierra34/MAESTRIA/MISW4103-Pruebas-automatizadas/CYPRESS/cypress/e2e/$FOLDER/*.cy.js"
    fi
}

agregar_x() {
    #!/bin/bash    
    carpeta="."     
    for archivo in "$carpeta"/*; do
      if [ -f "$archivo" ]; then
        nombre_base=$(basename "$archivo")
        nuevo_nombre="${nombre_base}.x"
        mv "$archivo" "$carpeta/$nuevo_nombre"
      fi
    done
}

saludar(){
    echo "Hola a todos"
}

quitar_x(){
    #!/bin/bash   
    carpeta="."  # Cambia esto por la ruta real    
    for archivo in "$carpeta"/*.x; do
      if [ -f "$archivo" ]; then
        nuevo_nombre="${archivo%.x}"
        mv "$archivo" "$nuevo_nombre"
      fi
    done
}


alias venv_iniciar='python3 -m venv .venv'
alias venv_activar='source .venv/bin/activate'
alias venv_desactivar='deactivate'

alias bitnami_reiniciar='sudo /opt/bitnami/ctlscript.sh restart'
alias bitnami_bncert='sudo /opt/bitnami/bncert-tool'
alias bitnami_phpini='sudo nano /opt/bitnami/php/etc/php.ini'
alias errorlog='cat  /opt/bitnami/apache2/logs/error_log'
alias clear-errorlog='sudo truncate -s0  /opt/bitnami/apache2/logs/error_log'

alias bashrc='. ~/.bashrc'

