#UPa
linux_version() {
    cat /etc/os-release
}

ssh_zip() {
    if [ -z "$1" ]; then
        echo "Usage: ssh_zip <foldername>"
        return 1
    fi
    sudo tar -czvf "$1".tgz "$1"/
}

requirements_generate(){
    pip freeze > requirements.txt
}

requirements_install(){
    pip install -r requirements.txt
}

flask_run() {
    clear
    flask run
}

flask_restart(){
    clear    
    sudo rm -f ../instance/*.sqlite ../instance/*.db
    flask run
}

bashrc_refresh(){
    cd ~/bashrc
    git pull
    alias bashrc='. ~/.bashrc'    
    cd -
}

test_all(){
    python -m unittest discover
}

watchdog(){
    watchmedo shell-command --patterns="*.py" --recursive command='python -m unittest discover -s tests -v' .
}

watchdog_always(){
    nohup watchmedo shell-command --patterns="*.py" --recursive --command='python -m unittest discover -s tests -v' . &
}

port_check() {
    sudo lsof -i :"$1"
}

port_kill() {
    sudo kill -9 "$1"
}

ssh_iniciar() {
    eval "$(ssh-agent -s)"
}


ssh_activar() {
    if [ -z "$1" ]; then
        echo "Usage: ssh_activar <key_filename>"
        return 1
    fi
    ssh-add ~/.ssh/"$1"
}

git_email() {
    if [ -z "$1" ]; then
        echo "Uso: git_set_email \"correo@example.com\""
        return 1
    fi
    git config --global user.email "$1"
    echo "Correo de Git configurado como: $1"
}

git_name() {
    if [ -z "$1" ]; then
        echo "Uso: git_set_name \"Tu Nombre\""
        return 1
    fi
    git config --global user.name "$1"
    echo "Nombre de Git configurado como: $1"
}

docker_networks(){
    sudo docker network ls

}

docker_networks_create(){
    if [ -z "$1" ]; then
        echo "Usage: cdocker_networks_create <network_name>"
        return 1
    fi

    NETWORK_NAME="$1"

    if sudo docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
        echo "Network '$NETWORK_NAME' already exists."
    else
        sudo docker network create "$NETWORK_NAME"
        echo "Network '$NETWORK_NAME' created successfully."
    fi
}

docker_networks_delete(){
        if [ -z "$1" ]; then
        echo "Usage: docker_networks_delete <network_name | all>"
        return 1
    fi

    NETWORK_NAME="$1"

    if [ "$NETWORK_NAME" == "all" ]; then
        echo "Deleting all user-defined Docker networks..."
        # List all user-defined networks (excluding 'bridge', 'host', 'none') and delete them
        for net in $(sudo docker network ls --format "{{.Name}}" --filter "driver=bridge"); do
            if [[ "$net" != "bridge" && "$net" != "host" && "$net" != "none" ]]; then
                echo "Deleting network: $net"
                sudo docker network rm "$net"
            fi
        done
        echo "All user-defined networks deleted successfully."
    else
        # Check if the specific network exists
        if sudo docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
            # Check if any containers are connected to the network
            if [ "$(sudo docker network inspect --format='{{range .Containers}}{{.Name}} {{end}}' "$NETWORK_NAME")" ]; then
                echo "Error: Network '$NETWORK_NAME' has active containers. Remove them first."
                return 1
            fi

            # Remove the network
            sudo docker network rm "$NETWORK_NAME"
            echo "Network '$NETWORK_NAME' deleted successfully."
        else
            echo "Network '$NETWORK_NAME' does not exist."
        fi
    fi
}

docker_containers(){
    sudo docker ps -a
}

docker_containers_run() {
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        echo "Usage: docker_run <originPort> <destinationPort> <image_name> <container_name>"
        return 1
    fi
    sudo docker run -d -p "$2:$1" --name "$4" "$3"
}

docker_containers_run_in_network() {
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ]; then
        echo "Usage: docker_run <originPort> <destinationPort> <image_name> <container_name> <network>"
        return 1
    fi

    CUSTOM_URL="$5"  # Set the custom URL to the 5th parameter (network name)
    
    sudo docker run --network "$5" -p "$2:$1" --name "$4" -e CUSTOM_URL="$CUSTOM_URL" "$3"
}


docker_containers_run_always() {
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        echo "Usage: docker_run <originPort> <destinationPort> <image_name> <container_name>"
        return 1
    fi
    sudo docker run -dp "$2":"$1" --name "$4" -w /app -v "$(pwd):/app" "$3"   
}

docker_containers_run_always_in_network() {
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ]; then
        echo "Usage: docker_run <originPort> <destinationPort> <image_name> <container_name> <network>"
        return 1
    fi
    sudo docker run -dp "$2:$1" --network "$5" --name "$4" -w /app -v "$(pwd):/app" "$3" tail -f /dev/null
}


docker_containers_start() {
    if [ "$1" == "all" ]; then
        echo "Starting all stopped containers..."
        sudo docker start $(sudo docker ps -aq)
    else
        echo "Starting container: $1"
        sudo docker start "$1"
    fi
}

docker_containers_stop() {
    if [ -z "$1" ]; then
        echo "Usage: docker_containers_stop <container_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker stop $(sudo docker ps -q)
    else
        sudo docker stop "$1"
    fi
}

docker_containers_restart() {
    if [ -z "$1" ]; then
        echo "Usage: docker_containers_restart <container_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker restart $(sudo docker ps -q)
    else
        sudo docker restart "$1"
    fi
}

docker_containers_delete() {
    if [ -z "$1" ]; then
        echo "Usage: docker_delete <container_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker rm $(sudo docker ps -aq)
    else
        sudo docker rm "$1"
    fi
}

docker_containers_logs(){
    if [ -z "$1" ]; then
        echo "Usage: docker_containers_logs <container_name_or_id>"
        return 1
    fi
    sudo docker logs -f "$1"
}

docker_images(){
    sudo docker images
}

docker_images_build() {
    if [ -z "$1" ]; then
        echo "Usage: docker_build <image_name>"
        return 1
    fi
    sudo docker build --network=host -t "$1" .
}

docker_images_delete() {
    if [ -z "$1" ]; then
        echo "Usage: docker_delete_image <image_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker rmi $(sudo docker images -q)
    else
        sudo docker rmi "$1"
    fi
}

docker_images_delete_forced() {
    if [ -z "$1" ]; then
        echo "Usage: docker_delete_image <image_name_or_id> | all"
        return 1
    fi

    if [ "$1" = "all" ]; then
        sudo docker rmi -f $(sudo docker images -q)
    else
        sudo docker rmi -f "$1"
    fi
}

docker_images_compose() {
    sudo docker compose up
}

docker_images_compose_forced() {
    if [ -z "$1" ]; then
        echo "Usage: docker_images_compose_forced <service_name>"
        return 1
    fi
    sudo docker compose up --build --force-recreate --no-deps "$1"
}

docker_images_pull() {
    if [ -z "$1" ]; then
        echo "Usage: docker_images_pull <image_name> <version (opcional)>"
        return 1
    fi
    sudo docker image pull "$1:${2:-latest}"
}

docker_install() {
    OS=$1  # Recibe 'debian' o 'ubuntu'

    if [[ "$OS" != "debian" && "$OS" != "ubuntu" ]]; then
        echo "Error: Debes especificar 'debian' o 'ubuntu'."
        return 1
    fi

    echo "Instalando Docker en $OS..."

    sudo apt-get update
    sudo apt-get install -y ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/$OS/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/$OS \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
}

ghost_run(){
    sudo docker run --name x-ghost-x -e NODE_ENV=development ghost
}

alias venv_iniciar='python3 -m venv .venv'
alias venv_activar='source .venv/bin/activate'
alias venv_desactivar='deactivate'

alias bitnami_reiniciar='sudo /opt/bitnami/ctlscript.sh restart'
alias bitnami_bncert='sudo /opt/bitnami/bncert-tool'
alias bitnami_phpini='sudo nano /opt/bitnami/php/etc/php.ini'
alias errorlog='cat  /opt/bitnami/apache2/logs/error_log'
alias clear-errorlog='sudo truncate -s0  /opt/bitnami/apache2/logs/error_log'

alias bashrc='. ~/.bashrc'

